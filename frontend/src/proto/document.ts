// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: document.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";

export const protobufPackage = "proto";

/** Message sent from client to server */
export interface DocumentUpdateRequest {
  documentId: string;
  content: string;
  /** To identify who made the change */
  clientId: string;
}

/** Message broadcast from server to clients */
export interface DocumentUpdateResponse {
  documentId: string;
  content: string;
  /** Who made the change, so clients can ignore their own updates */
  clientId: string;
}

function createBaseDocumentUpdateRequest(): DocumentUpdateRequest {
  return { documentId: "", content: "", clientId: "" };
}

export const DocumentUpdateRequest: MessageFns<DocumentUpdateRequest> = {
  encode(message: DocumentUpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.documentId !== "") {
      writer.uint32(10).string(message.documentId);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentUpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.documentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentUpdateRequest {
    return {
      documentId: isSet(object.documentId) ? globalThis.String(object.documentId) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
    };
  },

  toJSON(message: DocumentUpdateRequest): unknown {
    const obj: any = {};
    if (message.documentId !== "") {
      obj.documentId = message.documentId;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    return obj;
  },

  create(base?: DeepPartial<DocumentUpdateRequest>): DocumentUpdateRequest {
    return DocumentUpdateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DocumentUpdateRequest>): DocumentUpdateRequest {
    const message = createBaseDocumentUpdateRequest();
    message.documentId = object.documentId ?? "";
    message.content = object.content ?? "";
    message.clientId = object.clientId ?? "";
    return message;
  },
};

function createBaseDocumentUpdateResponse(): DocumentUpdateResponse {
  return { documentId: "", content: "", clientId: "" };
}

export const DocumentUpdateResponse: MessageFns<DocumentUpdateResponse> = {
  encode(message: DocumentUpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.documentId !== "") {
      writer.uint32(10).string(message.documentId);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DocumentUpdateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDocumentUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.documentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DocumentUpdateResponse {
    return {
      documentId: isSet(object.documentId) ? globalThis.String(object.documentId) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
    };
  },

  toJSON(message: DocumentUpdateResponse): unknown {
    const obj: any = {};
    if (message.documentId !== "") {
      obj.documentId = message.documentId;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    return obj;
  },

  create(base?: DeepPartial<DocumentUpdateResponse>): DocumentUpdateResponse {
    return DocumentUpdateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DocumentUpdateResponse>): DocumentUpdateResponse {
    const message = createBaseDocumentUpdateResponse();
    message.documentId = object.documentId ?? "";
    message.content = object.content ?? "";
    message.clientId = object.clientId ?? "";
    return message;
  },
};

export interface DocumentService {
  DocumentStream(request: Observable<DocumentUpdateRequest>): Observable<DocumentUpdateResponse>;
}

export const DocumentServiceServiceName = "proto.DocumentService";
export class DocumentServiceClientImpl implements DocumentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || DocumentServiceServiceName;
    this.rpc = rpc;
    this.DocumentStream = this.DocumentStream.bind(this);
  }
  DocumentStream(request: Observable<DocumentUpdateRequest>): Observable<DocumentUpdateResponse> {
    const data = request.pipe(map((request) => DocumentUpdateRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "DocumentStream", data);
    return result.pipe(map((data) => DocumentUpdateResponse.decode(new BinaryReader(data))));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
